<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nick Cobb</title>
    <link>https://loyaltyarm.github.io/</link>
    <description>Recent content on Nick Cobb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 29 Jul 2017 16:36:59 -0400</lastBuildDate>
    
	<atom:link href="https://loyaltyarm.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bootstrapping macOS for CI</title>
      <link>https://loyaltyarm.github.io/blog/bootstrapping-macos-for-ci/</link>
      <pubDate>Sat, 29 Jul 2017 16:36:59 -0400</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/bootstrapping-macos-for-ci/</guid>
      <description>Introduction I&amp;rsquo;ve been working on some other posts about provisioning macOS for the purposes of iOS CI. But before we can talk about provisioning, we might want to think about bootstrapping our macOS system first to make provisioning easier. What do I mean by bootstrapping, how is it accomplished, and why should you do it?
Bootstrapping, in this case, refers to the initial setup of a macOS machine (could be non macOS also) in order to enable provisioning.</description>
    </item>
    
    <item>
      <title>iOS CI with Anka Virtualization - Part 1</title>
      <link>https://loyaltyarm.github.io/blog/ios-ci-with-anka-virtualization---part-1/</link>
      <pubDate>Sat, 15 Jul 2017 11:53:53 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/ios-ci-with-anka-virtualization---part-1/</guid>
      <description>Disclaimer: I am an advisor for Veertu Inc.
Introduction Starting with this post, I am writing a series of articles to show you how to get started building your own macOS private cloud for iOS CI using Veertu Inc.&amp;rsquo;s latest technology, Anka. Anka was built to support many of the principles foundational to good continuous integration systems, including supporting fast incremental deploys and immutable infrastructure concepts. In this series, I&amp;rsquo;ll show you how to get started with their hypervisor, registry, and controller to take full advantage of tools that were purpose-built to support iOS and macOS CI on Apple hardware.</description>
    </item>
    
    <item>
      <title>macOS as a Service for Mobile Development at Uber</title>
      <link>https://loyaltyarm.github.io/blog/macos-as-a-service-for-mobile-development-at-uber/</link>
      <pubDate>Wed, 14 Jun 2017 23:27:24 -0400</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/macos-as-a-service-for-mobile-development-at-uber/</guid>
      <description>I recently had the privilege to give a talk at MacDevOpsYVR 2017 about quite a large undertaking of ours at Uber last year. Myself and two other engineers, Olivier Lessard and Kenneth Peterson built a massive macOS virtualization platform to support iOS development efforts at Uber during the Rider app rewrite. This infrastructure facilitates the automated continuous integration platform used to build and test Uber&amp;rsquo;s mobile applications.
Check out the talk below:</description>
    </item>
    
    <item>
      <title>resume</title>
      <link>https://loyaltyarm.github.io/resume/</link>
      <pubDate>Mon, 01 May 2017 22:04:28 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/resume/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://loyaltyarm.github.io/about/</link>
      <pubDate>Sun, 09 Apr 2017 23:22:59 -0400</pubDate>
      
      <guid>https://loyaltyarm.github.io/about/</guid>
      <description>I&amp;rsquo;m currently an Engineering Manager at Uber Advanced Technologies, leading the growth of an infrastructure organization. We&amp;rsquo;re responsible for things like cloud platforms, compute schedulers and clusters, distributed storage systems, machine learning platforms, and big data toolsets and systems. Prior to my time as an Engineering Manager, I spent time as a Sr. Systems Engineer focused on providing infrastructure as a service to a distributed team of engineers working on self-driving cars and trucks.</description>
    </item>
    
    <item>
      <title>Is this thing on?</title>
      <link>https://loyaltyarm.github.io/blog/is-this-thing-on/</link>
      <pubDate>Sun, 09 Apr 2017 23:22:59 -0400</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/is-this-thing-on/</guid>
      <description>Wat This is the initial post in a series of steps I am taking to move Cobbservations to a site powered by Hugo. I stumbled across hugo recently while working with the maintainers of the micromdm project. The beautiful site hosting the documentation is build with hugo, and given the looks, I just had to try it.
Somewhat separately, I&amp;rsquo;ve been using Markdown for quite a while and have finally gotten around to enjoying it more than standard wordpress-style content for blogging.</description>
    </item>
    
    <item>
      <title>Enhancement: iOS MDM should allow display timeout management without passcode</title>
      <link>https://loyaltyarm.github.io/blog/enhancement-ios-mdm-should-allow-display-timeout-management-without-passcode/</link>
      <pubDate>Fri, 17 Feb 2017 02:01:00 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/enhancement-ios-mdm-should-allow-display-timeout-management-without-passcode/</guid>
      <description>Hey all!
I&amp;rsquo;ve just opened rdar://30582319 in response to some testing I&amp;rsquo;ve been doing to attempt to manage the auto-lock settings on various iOS devices used as kiosks. In our case, we want to be able to set the display timeout to &amp;lsquo;15 minutes&amp;rsquo; or ideally &amp;lsquo;Never&amp;rsquo;, but not require the device to have a passcode enabled.
I&amp;rsquo;ve been testing this with a custom config profile, of which I&amp;rsquo;ve created a gist here.</description>
    </item>
    
    <item>
      <title>Homebrew on Sierra now requires the latest Xcode</title>
      <link>https://loyaltyarm.github.io/blog/homebrew-on-sierra-now-requires-the-latest-xcode/</link>
      <pubDate>Sat, 12 Nov 2016 11:15:06 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/homebrew-on-sierra-now-requires-the-latest-xcode/</guid>
      <description>While fumbling my way through a bootstrapping workflow for macOS Sierra, I found that recent updates to Homebrew now require the latest version of Xcode when the machine in question is running macOS Sierra.
It looks like the check boils down to a scenario when the relevant machine is running macOS Sierra AND does NOT have the CI attribute.
If the CI attribute is specified, then the Homebrew check will proceed and allow a different version of Xcode to be installed.</description>
    </item>
    
    <item>
      <title>How to remove the Kids profile from your Netflix account</title>
      <link>https://loyaltyarm.github.io/blog/how-to-remove-the-kids-profile-from-your-netflix-account/</link>
      <pubDate>Thu, 03 Nov 2016 00:34:17 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/how-to-remove-the-kids-profile-from-your-netflix-account/</guid>
      <description>@ProductHunt you can delete that profile by editing in the web netflix&amp;hellip;was a daunting hunt but i found it
&amp;mdash; Nick Cobb (@loyaltyarm) November 3, 2016 
This came up on Twitter yesterday and I had previously dug into this a good while ago for myself so I figured I&amp;rsquo;d write a short post about it. I don&amp;rsquo;t have kids so I don&amp;rsquo;t use the &amp;lsquo;Kids&amp;rsquo; Netflix profile for anything.</description>
    </item>
    
    <item>
      <title>Fixing Persistent Notifications on iOS 10</title>
      <link>https://loyaltyarm.github.io/blog/fixing-persistent-notifications-on-ios-10/</link>
      <pubDate>Thu, 27 Oct 2016 22:03:31 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/fixing-persistent-notifications-on-ios-10/</guid>
      <description>After upgrading to iOS 10, quite a few people have noticed a rather annoying change in the behavior of notifications on their devices. In particular, banner-style notifications that were automatically dismissed in previous versions of iOS, seem to stay on the screen until an explicit action is taken to snooze or dismiss them. Well, if they seem that way, it&amp;rsquo;s because that&amp;rsquo;s how they were designed. In fact, notifications can carry three styles and have for quite some time on iOS:</description>
    </item>
    
    <item>
      <title>Centering GMSMapView on User&#39;s Current Location - Google Maps SDK for iOS</title>
      <link>https://loyaltyarm.github.io/blog/centering-gmsmapview-on-users-current-location---google-maps-sdk-for-ios/</link>
      <pubDate>Tue, 06 May 2014 01:27:26 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/centering-gmsmapview-on-users-current-location---google-maps-sdk-for-ios/</guid>
      <description>I&amp;rsquo;m working on a personal project that involves the use of the Google Maps SDK for iOS. As I am still picking up various tidbits and skills related to iOS development, I did a bit of learning first in order to get started. Code School recently opened up a free channel for learning about using Google Maps SDK for iOS, and that has been pretty helpful. According to the Google Maps SDK documentation, there are various ways to create a mapView and assign its camera position, or force a camera update.</description>
    </item>
    
    <item>
      <title>Using &#39;curl&#39; behind a Proxy</title>
      <link>https://loyaltyarm.github.io/blog/using-curl-behind-a-proxy/</link>
      <pubDate>Fri, 15 Nov 2013 22:47:03 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/using-curl-behind-a-proxy/</guid>
      <description>This is a relatively stupid problem that took me a few seconds to figure out, but I figured I would post on it anyway. I have recently been working with createosxinstallpkg, part of the tool set included to administer Munki, an open source managed software update server (and client) for OS X machines.
I used createosxinstallpkg last year when I needed to build a never-booted upgrade package to for 10.7 clients to upgrade to 10.</description>
    </item>
    
    <item>
      <title>Using Splunk for McAfee EEMac/Filevault 2 Comparison - Part 2</title>
      <link>https://loyaltyarm.github.io/blog/using-splunk-for-mcafee-eemac/filevault-2-comparison---part-2/</link>
      <pubDate>Sat, 13 Jul 2013 17:53:26 -0500</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/using-splunk-for-mcafee-eemac/filevault-2-comparison---part-2/</guid>
      <description>In Part 1, we looked at setting up Disk I/O monitoring using Splunk. In Part 2, we will look into formatting our search in order to get the most of our data.
To place this post in the context of its title, I&amp;rsquo;m moving away from using the machine that was shown in Part 1 as connected to Splunk (loyaltyarms-mac.local). That was merely to show you how to get your data into Splunk.</description>
    </item>
    
    <item>
      <title>Using Splunk for McAfee EEMac/Filevault 2 Comparison – Part 1</title>
      <link>https://loyaltyarm.github.io/blog/using-splunk-for-mcafee-eemac/filevault-2-comparison--part-1/</link>
      <pubDate>Thu, 27 Jun 2013 23:20:18 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/using-splunk-for-mcafee-eemac/filevault-2-comparison--part-1/</guid>
      <description>Recently I ran across a post about setting up Splunk to work with DeployStudio via Noel Balonso. I began using Splunk for reporting on my Apple and Windows (test) imaging environments, to much satisfaction.
In the meantime, I have also been working with McAfee’s EEMac product for full-disk encryption in OS X. Our org has been comparing its performance to FileVault 2 and trying to make a decision as to whether or not to proceed based on our existing environment for Windows management, which also utilizes McAfee’s FDE product for Windows (formerly Safeboot).</description>
    </item>
    
    <item>
      <title>Building OS X Test Environments in VMWare Fusion w/ System Image Utility</title>
      <link>https://loyaltyarm.github.io/blog/building-os-x-test-environments-in-vmware-fusion-w/-system-image-utility/</link>
      <pubDate>Tue, 11 Jun 2013 01:29:08 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/building-os-x-test-environments-in-vmware-fusion-w/-system-image-utility/</guid>
      <description>A while ago, Rich Trouton posted a method for setting up an easily maintainable OSX virtual machine environment for testing, using DeployStudio (DSS) and a few other tools. His method is great because it allows you to build a specific test image (base) and store that as a workflow and master pair in your DSS environment. As Rich showed, it then becomes very easy to get going quickly when you need a fresh virtual machine to test new applications or other scenarios.</description>
    </item>
    
  </channel>
</rss>