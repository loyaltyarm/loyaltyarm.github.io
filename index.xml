<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nick Cobb</title>
    <link>https://loyaltyarm.github.io/</link>
    <description>Recent content on Nick Cobb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 14 Jun 2017 23:27:24 -0400</lastBuildDate>
    
	<atom:link href="https://loyaltyarm.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>macOS as a Service for Mobile Development at Uber</title>
      <link>https://loyaltyarm.github.io/blog/macos-as-a-service-for-mobile-development-at-uber/</link>
      <pubDate>Wed, 14 Jun 2017 23:27:24 -0400</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/macos-as-a-service-for-mobile-development-at-uber/</guid>
      <description>I recently had the privilege to give a talk at MacDevOpsYVR 2017 about quite a large undertaking of ours at Uber last year. Myself and two other engineers, Olivier Lessard and Kenneth Peterson built a massive macOS virtualization platform to support iOS development efforts at Uber during the Rider app rewrite. This infrastructure facilitates the automated continuous integration platform used to build and test Uber&amp;rsquo;s mobile applications.
Check out the talk below:</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://loyaltyarm.github.io/about/</link>
      <pubDate>Sun, 09 Apr 2017 23:22:59 -0400</pubDate>
      
      <guid>https://loyaltyarm.github.io/about/</guid>
      <description>I&amp;rsquo;m currently a Senior Systems Engineer on the Developer Productivity team at Uber Advanced Technologies. At Uber ATG, my main focus is building reliable, (sometimes) immutable infrastructure or services to improve the developer experience for self-driving engineers.
In previous years at Uber, I built, managed, and supported mobile continuous integration infrastructure for our massive mobile engineering organization. In addition, I also provided full support for Uber&amp;rsquo;s global core business operations in areas such as endpoint management, telecommunications strategy, network topologies, and scalability planning and design.</description>
    </item>
    
    <item>
      <title>Is this thing on?</title>
      <link>https://loyaltyarm.github.io/blog/is-this-thing-on/</link>
      <pubDate>Sun, 09 Apr 2017 23:22:59 -0400</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/is-this-thing-on/</guid>
      <description>Wat This is the initial post in a series of steps I am taking to move Cobbservations to a site powered by Hugo. I stumbled across hugo recently while working with the maintainers of the micromdm project. The beautiful site hosting the documentation is build with hugo, and given the looks, I just had to try it.
Somewhat separately, I&amp;rsquo;ve been using Markdown for quite a while and have finally gotten around to enjoying it more than standard wordpress-style content for blogging.</description>
    </item>
    
    <item>
      <title>Enhancement: iOS MDM should allow display timeout management without passcode</title>
      <link>https://loyaltyarm.github.io/blog/enhancement-ios-mdm-should-allow-display-timeout-management-without-passcode/</link>
      <pubDate>Fri, 17 Feb 2017 02:01:00 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/enhancement-ios-mdm-should-allow-display-timeout-management-without-passcode/</guid>
      <description>Hey all!
I&amp;rsquo;ve just opened rdar://30582319 in response to some testing I&amp;rsquo;ve been doing to attempt to manage the auto-lock settings on various iOS devices used as kiosks. In our case, we want to be able to set the display timeout to &amp;lsquo;15 minutes&amp;rsquo; or ideally &amp;lsquo;Never&amp;rsquo;, but not require the device to have a passcode enabled.
I&amp;rsquo;ve been testing this with a custom config profile, of which I&amp;rsquo;ve created a gist here.</description>
    </item>
    
    <item>
      <title>How to remove the Kids profile from your Netflix account</title>
      <link>https://loyaltyarm.github.io/blog/how-to-remove-the-kids-profile-from-your-netflix-account/</link>
      <pubDate>Thu, 03 Nov 2016 00:34:17 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/how-to-remove-the-kids-profile-from-your-netflix-account/</guid>
      <description>@ProductHunt you can delete that profile by editing in the web netflix&amp;hellip;was a daunting hunt but i found it
&amp;mdash; Nick Cobb (@loyaltyarm) November 3, 2016 
This came up on Twitter yesterday and I had previously dug into this a good while ago for myself so I figured I&amp;rsquo;d write a short post about it. I don&amp;rsquo;t have kids so I don&amp;rsquo;t use the &amp;lsquo;Kids&amp;rsquo; Netflix profile for anything.</description>
    </item>
    
    <item>
      <title>Centering GMSMapView on User&#39;s Current Location - Google Maps SDK for iOS</title>
      <link>https://loyaltyarm.github.io/blog/centering-gmsmapview-on-users-current-location---google-maps-sdk-for-ios/</link>
      <pubDate>Tue, 06 May 2014 01:27:26 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/centering-gmsmapview-on-users-current-location---google-maps-sdk-for-ios/</guid>
      <description>I&amp;rsquo;m working on a personal project that involves the use of the Google Maps SDK for iOS. As I am still picking up various tidbits and skills related to iOS development, I did a bit of learning first in order to get started. Code School recently opened up a free channel for learning about using Google Maps SDK for iOS, and that has been pretty helpful. According to the Google Maps SDK documentation, there are various ways to create a mapView and assign its camera position, or force a camera update.</description>
    </item>
    
    <item>
      <title>Using Splunk for McAfee EEMac/Filevault 2 Comparison - Part 2</title>
      <link>https://loyaltyarm.github.io/blog/using-splunk-for-mcafee-eemac/filevault-2-comparison---part-2/</link>
      <pubDate>Sat, 13 Jul 2013 17:53:26 -0500</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/using-splunk-for-mcafee-eemac/filevault-2-comparison---part-2/</guid>
      <description>In Part 1, we looked at setting up Disk I/O monitoring using Splunk. In Part 2, we will look into formatting our search in order to get the most of our data.
To place this post in the context of its title, I&amp;rsquo;m moving away from using the machine that was shown in Part 1 as connected to Splunk (loyaltyarms-mac.local). That was merely to show you how to get your data into Splunk.</description>
    </item>
    
    <item>
      <title>Using Splunk for McAfee EEMac/Filevault 2 Comparison – Part 1</title>
      <link>https://loyaltyarm.github.io/blog/using-splunk-for-mcafee-eemac/filevault-2-comparison--part-1/</link>
      <pubDate>Thu, 27 Jun 2013 23:20:18 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/using-splunk-for-mcafee-eemac/filevault-2-comparison--part-1/</guid>
      <description>Recently I ran across a post about setting up Splunk to work with DeployStudio via Noel Balonso. I began using Splunk for reporting on my Apple and Windows (test) imaging environments, to much satisfaction.
In the meantime, I have also been working with McAfee’s EEMac product for full-disk encryption in OS X. Our org has been comparing its performance to FileVault 2 and trying to make a decision as to whether or not to proceed based on our existing environment for Windows management, which also utilizes McAfee’s FDE product for Windows (formerly Safeboot).</description>
    </item>
    
    <item>
      <title>Building OS X Test Environments in VMWare Fusion w/ System Image Utility</title>
      <link>https://loyaltyarm.github.io/blog/building-os-x-test-environments-in-vmware-fusion-w/-system-image-utility/</link>
      <pubDate>Tue, 11 Jun 2013 01:29:08 -0700</pubDate>
      
      <guid>https://loyaltyarm.github.io/blog/building-os-x-test-environments-in-vmware-fusion-w/-system-image-utility/</guid>
      <description>A while ago, Rich Trouton posted a method for setting up an easily maintainable OSX virtual machine environment for testing, using DeployStudio (DSS) and a few other tools. His method is great because it allows you to build a specific test image (base) and store that as a workflow and master pair in your DSS environment. As Rich showed, it then becomes very easy to get going quickly when you need a fresh virtual machine to test new applications or other scenarios.</description>
    </item>
    
  </channel>
</rss>